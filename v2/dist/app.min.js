'use strict';var COMPILED = !0, goog = goog || {};
goog.global = this;
goog.isDef = function(a) {
  return void 0 !== a;
};
goog.exportPath_ = function(a, b, c) {
  a = a.split(".");
  c = c || goog.global;
  a[0] in c || !c.execScript || c.execScript("var " + a[0]);
  for (var d;a.length && (d = a.shift());) {
    !a.length && goog.isDef(b) ? c[d] = b : c = c[d] ? c[d] : c[d] = {};
  }
};
goog.define = function(a, b) {
  var c = b;
  COMPILED || (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, a) ? c = goog.global.CLOSURE_UNCOMPILED_DEFINES[a] : goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, a) && (c = goog.global.CLOSURE_DEFINES[a]));
  goog.exportPath_(a, c);
};
goog.DEBUG = !0;
goog.LOCALE = "en";
goog.TRUSTED_SITE = !0;
goog.STRICT_MODE_COMPATIBLE = !1;
goog.provide = function(a) {
  if (!COMPILED) {
    if (goog.isProvided_(a)) {
      throw Error('Namespace "' + a + '" already declared.');
    }
    delete goog.implicitNamespaces_[a];
    for (var b = a;(b = b.substring(0, b.lastIndexOf("."))) && !goog.getObjectByName(b);) {
      goog.implicitNamespaces_[b] = !0;
    }
  }
  goog.exportPath_(a);
};
goog.setTestOnly = function(a) {
  if (COMPILED && !goog.DEBUG) {
    throw a = a || "", Error("Importing test-only code into non-debug environment" + a ? ": " + a : ".");
  }
};
goog.forwardDeclare = function(a) {
};
COMPILED || (goog.isProvided_ = function(a) {
  return!goog.implicitNamespaces_[a] && goog.isDefAndNotNull(goog.getObjectByName(a));
}, goog.implicitNamespaces_ = {});
goog.getObjectByName = function(a, b) {
  for (var c = a.split("."), d = b || goog.global, e;e = c.shift();) {
    if (goog.isDefAndNotNull(d[e])) {
      d = d[e];
    } else {
      return null;
    }
  }
  return d;
};
goog.globalize = function(a, b) {
  var c = b || goog.global, d;
  for (d in a) {
    c[d] = a[d];
  }
};
goog.addDependency = function(a, b, c) {
  if (goog.DEPENDENCIES_ENABLED) {
    var d;
    a = a.replace(/\\/g, "/");
    for (var e = goog.dependencies_, g = 0;d = b[g];g++) {
      e.nameToPath[d] = a, a in e.pathToNames || (e.pathToNames[a] = {}), e.pathToNames[a][d] = !0;
    }
    for (d = 0;b = c[d];d++) {
      a in e.requires || (e.requires[a] = {}), e.requires[a][b] = !0;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = !0;
goog.require = function(a) {
  if (!COMPILED && !goog.isProvided_(a)) {
    if (goog.ENABLE_DEBUG_LOADER) {
      var b = goog.getPathFromDeps_(a);
      if (b) {
        goog.included_[b] = !0;
        goog.writeScripts_();
        return;
      }
    }
    a = "goog.require could not find: " + a;
    goog.global.console && goog.global.console.error(a);
    throw Error(a);
  }
};
goog.basePath = "";
goog.nullFunction = function() {
};
goog.identityFunction = function(a, b) {
  return a;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(a) {
  a.getInstance = function() {
    if (a.instance_) {
      return a.instance_;
    }
    goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = a);
    return a.instance_ = new a;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
goog.DEPENDENCIES_ENABLED && (goog.included_ = {}, goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}}, goog.inHtmlDocument_ = function() {
  var a = goog.global.document;
  return "undefined" != typeof a && "write" in a;
}, goog.findBasePath_ = function() {
  if (goog.global.CLOSURE_BASE_PATH) {
    goog.basePath = goog.global.CLOSURE_BASE_PATH;
  } else {
    if (goog.inHtmlDocument_()) {
      for (var a = goog.global.document.getElementsByTagName("script"), b = a.length - 1;0 <= b;--b) {
        var c = a[b].src, d = c.lastIndexOf("?"), d = -1 == d ? c.length : d;
        if ("base.js" == c.substr(d - 7, 7)) {
          goog.basePath = c.substr(0, d - 7);
          break;
        }
      }
    }
  }
}, goog.importScript_ = function(a) {
  var b = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
  !goog.dependencies_.written[a] && b(a) && (goog.dependencies_.written[a] = !0);
}, goog.writeScriptTag_ = function(a) {
  if (goog.inHtmlDocument_()) {
    var b = goog.global.document;
    if ("complete" == b.readyState) {
      if (/\bdeps.js$/.test(a)) {
        return!1;
      }
      throw Error('Cannot write "' + a + '" after document load');
    }
    b.write('<script type="text/javascript" src="' + a + '">\x3c/script>');
    return!0;
  }
  return!1;
}, goog.writeScripts_ = function() {
  function a(e) {
    if (!(e in d.written)) {
      if (!(e in d.visited) && (d.visited[e] = !0, e in d.requires)) {
        for (var f in d.requires[e]) {
          if (!goog.isProvided_(f)) {
            if (f in d.nameToPath) {
              a(d.nameToPath[f]);
            } else {
              throw Error("Undefined nameToPath for " + f);
            }
          }
        }
      }
      e in c || (c[e] = !0, b.push(e));
    }
  }
  var b = [], c = {}, d = goog.dependencies_, e;
  for (e in goog.included_) {
    d.written[e] || a(e);
  }
  for (e = 0;e < b.length;e++) {
    if (b[e]) {
      goog.importScript_(goog.basePath + b[e]);
    } else {
      throw Error("Undefined script input");
    }
  }
}, goog.getPathFromDeps_ = function(a) {
  return a in goog.dependencies_.nameToPath ? goog.dependencies_.nameToPath[a] : null;
}, goog.findBasePath_(), goog.global.CLOSURE_NO_DEPS || goog.importScript_(goog.basePath + "deps.js"));
goog.typeOf = function(a) {
  var b = typeof a;
  if ("object" == b) {
    if (a) {
      if (a instanceof Array) {
        return "array";
      }
      if (a instanceof Object) {
        return b;
      }
      var c = Object.prototype.toString.call(a);
      if ("[object Window]" == c) {
        return "object";
      }
      if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) {
        return "array";
      }
      if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if ("function" == b && "undefined" == typeof a.call) {
      return "object";
    }
  }
  return b;
};
goog.isNull = function(a) {
  return null === a;
};
goog.isDefAndNotNull = function(a) {
  return null != a;
};
goog.isArray = function(a) {
  return "array" == goog.typeOf(a);
};
goog.isArrayLike = function(a) {
  var b = goog.typeOf(a);
  return "array" == b || "object" == b && "number" == typeof a.length;
};
goog.isDateLike = function(a) {
  return goog.isObject(a) && "function" == typeof a.getFullYear;
};
goog.isString = function(a) {
  return "string" == typeof a;
};
goog.isBoolean = function(a) {
  return "boolean" == typeof a;
};
goog.isNumber = function(a) {
  return "number" == typeof a;
};
goog.isFunction = function(a) {
  return "function" == goog.typeOf(a);
};
goog.isObject = function(a) {
  var b = typeof a;
  return "object" == b && null != a || "function" == b;
};
goog.getUid = function(a) {
  return a[goog.UID_PROPERTY_] || (a[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(a) {
  return!!a[goog.UID_PROPERTY_];
};
goog.removeUid = function(a) {
  "removeAttribute" in a && a.removeAttribute(goog.UID_PROPERTY_);
  try {
    delete a[goog.UID_PROPERTY_];
  } catch (b) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (1E9 * Math.random() >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(a) {
  var b = goog.typeOf(a);
  if ("object" == b || "array" == b) {
    if (a.clone) {
      return a.clone();
    }
    var b = "array" == b ? [] : {}, c;
    for (c in a) {
      b[c] = goog.cloneObject(a[c]);
    }
    return b;
  }
  return a;
};
goog.bindNative_ = function(a, b, c) {
  return a.call.apply(a.bind, arguments);
};
goog.bindJs_ = function(a, b, c) {
  if (!a) {
    throw Error();
  }
  if (2 < arguments.length) {
    var d = Array.prototype.slice.call(arguments, 2);
    return function() {
      var c = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(c, d);
      return a.apply(b, c);
    };
  }
  return function() {
    return a.apply(b, arguments);
  };
};
goog.bind = function(a, b, c) {
  Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? goog.bind = goog.bindNative_ : goog.bind = goog.bindJs_;
  return goog.bind.apply(null, arguments);
};
goog.partial = function(a, b) {
  var c = Array.prototype.slice.call(arguments, 1);
  return function() {
    var b = c.slice();
    b.push.apply(b, arguments);
    return a.apply(this, b);
  };
};
goog.mixin = function(a, b) {
  for (var c in b) {
    a[c] = b[c];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(a) {
  if (goog.global.execScript) {
    goog.global.execScript(a, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (null == goog.evalWorksForGlobals_ && (goog.global.eval("var _et_ = 1;"), "undefined" != typeof goog.global._et_ ? (delete goog.global._et_, goog.evalWorksForGlobals_ = !0) : goog.evalWorksForGlobals_ = !1), goog.evalWorksForGlobals_) {
        goog.global.eval(a);
      } else {
        var b = goog.global.document, c = b.createElement("script");
        c.type = "text/javascript";
        c.defer = !1;
        c.appendChild(b.createTextNode(a));
        b.body.appendChild(c);
        b.body.removeChild(c);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.getCssName = function(a, b) {
  var c = function(a) {
    return goog.cssNameMapping_[a] || a;
  }, d = function(a) {
    a = a.split("-");
    for (var b = [], d = 0;d < a.length;d++) {
      b.push(c(a[d]));
    }
    return b.join("-");
  }, d = goog.cssNameMapping_ ? "BY_WHOLE" == goog.cssNameMappingStyle_ ? c : d : function(a) {
    return a;
  };
  return b ? a + "-" + d(b) : d(a);
};
goog.setCssNameMapping = function(a, b) {
  goog.cssNameMapping_ = a;
  goog.cssNameMappingStyle_ = b;
};
!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING && (goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING);
goog.getMsg = function(a, b) {
  var c = b || {}, d;
  for (d in c) {
    var e = ("" + c[d]).replace(/\$/g, "$$$$");
    a = a.replace(new RegExp("\\{\\$" + d + "\\}", "gi"), e);
  }
  return a;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(a, b, c) {
  goog.exportPath_(a, b, c);
};
goog.exportProperty = function(a, b, c) {
  a[b] = c;
};
goog.inherits = function(a, b) {
  function c() {
  }
  c.prototype = b.prototype;
  a.superClass_ = b.prototype;
  a.prototype = new c;
  a.prototype.constructor = a;
  a.base = function(a, c, g) {
    var f = Array.prototype.slice.call(arguments, 2);
    return b.prototype[c].apply(a, f);
  };
};
goog.base = function(a, b, c) {
  var d = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !d) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (d.superClass_) {
    return d.superClass_.constructor.apply(a, Array.prototype.slice.call(arguments, 1));
  }
  for (var e = Array.prototype.slice.call(arguments, 2), g = !1, f = a.constructor;f;f = f.superClass_ && f.superClass_.constructor) {
    if (f.prototype[b] === d) {
      g = !0;
    } else {
      if (g) {
        return f.prototype[b].apply(a, e);
      }
    }
  }
  if (a[b] === d) {
    return a.constructor.prototype[b].apply(a, e);
  }
  throw Error("goog.base called from a method of one name to a method of a different name");
};
goog.scope = function(a) {
  a.call(goog.global);
};
var ThreeViewer = {Config:{}, ConfigLocalStorage:function(a) {
  a.setPrefix("ng-three-viewer");
}};
ThreeViewer.ConfigLocalStorage.$inject = ["localStorageServiceProvider"];
ThreeViewer.ConfigLocation = function(a) {
  a.html5Mode = !0;
};
ThreeViewer.ConfigLocation.$inject = ["$locationProvider"];
ThreeViewer.ConfigRouters = function(a) {
  a.when("/", {templateUrl:window.chrome ? "/v2/dist/partials/chrome.html" : "/v2/dist/partials/bad-time.html"}).otherwise({redirectTo:"/"});
};
ThreeViewer.ConfigRouters.$inject = ["$routeProvider"];
ThreeViewer.AppController = function(a, b) {
  this.scope = a;
  this.ViewerService = b;
  this.tb = {about:!1, visible:!0, loader:!0};
  this.data = {scale:1, rotateX:0, rotateY:0, rotateZ:0, positionX:0, positionY:0, positionZ:0};
  this.init();
};
goog.exportSymbol("ThreeViewer.AppController", ThreeViewer.AppController);
ThreeViewer.AppController.$inject = ["$scope", "ViewerService"];
ThreeViewer.AppController.prototype.init = function() {
  this.ViewerService.init({canvasId:"viewer", containerId:"container"});
  this.listeners();
};
ThreeViewer.AppController.prototype.listeners = function() {
  this.scope.$on("hideLoader", function() {
    this.tb.loader = !1;
  }.bind(this));
};
ThreeViewer.AppController.prototype.toggleLoader = function() {
  this.tb.about = !1;
  this.tb.loader = !this.tb.loader;
};
goog.exportProperty(ThreeViewer.AppController.prototype, "toggleLoader", ThreeViewer.AppController.prototype.toggleLoader);
ThreeViewer.AppController.prototype.hideAbout = function() {
  this.tb.about = !1;
};
goog.exportProperty(ThreeViewer.AppController.prototype, "hideAbout", ThreeViewer.AppController.prototype.hideAbout);
ThreeViewer.AppController.prototype.toggleToolbar = function() {
  this.tb.about = !1;
  this.tb.visible = !this.tb.visible;
};
goog.exportProperty(ThreeViewer.AppController.prototype, "toggleToolbar", ThreeViewer.AppController.prototype.toggleToolbar);
ThreeViewer.AppController.prototype.showAbout = function() {
  this.tb.loader = !1;
  this.tb.visible = !1;
  this.tb.about = !0;
};
goog.exportProperty(ThreeViewer.AppController.prototype, "showAbout", ThreeViewer.AppController.prototype.showAbout);
ThreeViewer.AppController.prototype.hideLoader = function() {
  this.tb.loader = !1;
};
goog.exportProperty(ThreeViewer.AppController.prototype, "hideLoader", ThreeViewer.AppController.prototype.hideLoader);
ThreeViewer.AppController.prototype.hideToolbar = function() {
  this.tb.visible = !1;
};
goog.exportProperty(ThreeViewer.AppController.prototype, "hideToolbar", ThreeViewer.AppController.prototype.hideToolbar);
ThreeViewer.AppController.prototype.scale = function() {
  this.ViewerService.scale(this.data.scale);
};
goog.exportProperty(ThreeViewer.AppController.prototype, "scale", ThreeViewer.AppController.prototype.scale);
ThreeViewer.AppController.prototype.rotate = function() {
  this.ViewerService.rotate(parseFloat(this.data.rotateX), parseFloat(this.data.rotateY), parseFloat(this.data.rotateZ));
};
ThreeViewer.AppController.prototype.translate = function() {
  this.ViewerService.translate(parseFloat(this.data.positionX), parseFloat(this.data.positionY), parseFloat(this.data.positionZ));
};
ThreeViewer.Directives = {};
ThreeViewer.SelectDirective = function(a) {
  this.ViewerService = a;
  this.link = this.link.bind(this);
};
ThreeViewer.SelectDirective.factory = function(a) {
  return{restrict:"A", link:(new ThreeViewer.SelectDirective(a)).link};
};
ThreeViewer.SelectDirective.factory.$inject = ["ViewerService"];
ThreeViewer.SelectDirective.prototype.link = function(a, b, c) {
  this.scope = a;
  this.elem = b;
  this.attrs = c;
  var d, e, g, f, h = {};
  $(this.elem).hammer({prevent_default:!1}).bind("tap", function(a) {
    d = a.gesture.center.x;
    e = a.gesture.center.y;
    g = window.innerWidth;
    f = window.innerHeight;
    h.x = d / g * 2 - 1;
    h.y = 2 * -(e / f) + 1;
    this.ViewerService.makeSelection(h);
  }.bind(this));
};
ThreeViewer.SelectDirective.prototype.link.$inject = ["scope", "elem", "attrs"];
ThreeViewer.FileLoaderDirective = function() {
  return{restrict:"A", templateUrl:"/v2/dist/partials/file-loader.html"};
};
ThreeViewer.ToolbarsDirective = function() {
  return{restrict:"A", templateUrl:"/v2/dist/partials/toolbar.html"};
};
ThreeViewer.AboutDirective = function() {
  return{restrict:"A", templateUrl:"/v2/dist/partials/about.html"};
};
ThreeViewer.StopEventDirective = function() {
  this.link = this.link.bind(this);
};
ThreeViewer.StopEventDirective.factory = function() {
  return{restrict:"A", link:(new ThreeViewer.StopEventDirective).link};
};
ThreeViewer.StopEventDirective.prototype.link = function(a, b, c) {
  this.scope = a;
  this.elem = b;
  this.attrs = c;
  this.elem.on("click", function(a) {
    a.stopImmediatePropagation();
    a.preventDefault();
  });
};
ThreeViewer.FileLoaderController = function(a, b, c, d) {
  this.scope = a;
  this.MessageBus = b;
  this.ViewerService = c;
  this.StorageService = d;
  this.state = {recent:!0, loadJS:!1, loadGLTF:!1, loadOBJ:!1};
  this.data = {selectedModel:null, recent:null, obj:null, mtl:null, name:null, url:null, gltfname:null, jsurl:null, jsname:null};
  this.init();
};
goog.exportSymbol("ThreeViewer.FileLoaderController", ThreeViewer.FileLoaderController);
ThreeViewer.FileLoaderController.$inject = ["$scope", "MessageBus", "ViewerService", "StorageService"];
ThreeViewer.FileLoaderController.prototype.init = function() {
  this.data.recent = this.StorageService.getAllFiles();
  this.listeners();
};
ThreeViewer.FileLoaderController.prototype.listeners = function() {
  this.scope.$on("updatedHistory", function() {
    this.populateHistory();
  }.bind(this));
  this.scope.$on("appReady", function() {
    this.loadSample();
  }.bind(this));
};
ThreeViewer.FileLoaderController.prototype.showTab = function(a) {
  this.state.recent = !1;
  this.state.loadJS = !1;
  this.state.loadGLTF = !1;
  this.state.loadOBJ = !1;
  this.state[a] = !0;
};
goog.exportProperty(ThreeViewer.FileLoaderController.prototype, "showTab", ThreeViewer.FileLoaderController.prototype.showTab);
ThreeViewer.FileLoaderController.prototype.loadSelectedFile = function() {
  var a = this.data.selectedModel;
  "obj" == a.type ? (this.data.obj = a.obj, this.data.name = a.name, this.loadOBJ()) : "objmtl" == a.type ? (this.data.obj = a.obj, this.data.mtl = a.mtl, this.data.name = a.name, this.loadOBJMTL()) : "JSON" == a.type ? (this.data.jsurl = a.url, this.data.jsname = a.name, this.loadJSON()) : "glTF" == a.type && (this.data.url = a.url, this.data.gltfname = a.name, this.loadglTF());
  this.MessageBus.trigger("hideLoader");
};
goog.exportProperty(ThreeViewer.FileLoaderController.prototype, "loadSelectedFile", ThreeViewer.FileLoaderController.prototype.loadSelectedFile);
ThreeViewer.FileLoaderController.prototype.loadOBJ = function() {
  if (this.data.obj && this.data.name) {
    var a = {obj:this.data.obj, name:this.data.name, type:"obj"};
    this.ViewerService.loadOBJ(a);
    this.StorageService.saveFile(a);
    this.clearOut();
    this.MessageBus.trigger("hideLoader");
  } else {
    alert("need obj url and a name");
  }
};
goog.exportProperty(ThreeViewer.FileLoaderController.prototype, "loadOBJ", ThreeViewer.FileLoaderController.prototype.loadOBJ);
ThreeViewer.FileLoaderController.prototype.loadSampleOBJ = function() {
  this.data.obj = SETUP.SAMPLES.OBJURL;
  this.data.name = SETUP.SAMPLES.OBJNAME;
  this.loadOBJ();
};
goog.exportProperty(ThreeViewer.FileLoaderController.prototype, "loadSampleOBJ", ThreeViewer.FileLoaderController.prototype.loadSampleOBJ);
ThreeViewer.FileLoaderController.prototype.loadOBJMTL = function() {
  if (this.data.obj && this.data.mtl && this.data.name) {
    var a = {obj:this.data.obj, mtl:this.data.mtl, name:this.data.name, type:"objmtl"};
    this.ViewerService.loadOBJMTL(a);
    this.StorageService.saveFile(a);
    this.MessageBus.trigger("hideLoader");
    this.clearOut();
  } else {
    alert("need obj, mtl and name");
  }
};
goog.exportProperty(ThreeViewer.FileLoaderController.prototype, "loadOBJMTL", ThreeViewer.FileLoaderController.prototype.loadOBJMTL);
ThreeViewer.FileLoaderController.prototype.loadSampleOBJMTL = function() {
  this.data.obj = SETUP.SAMPLES.OBJURL;
  this.data.mtl = SETUP.SAMPLES.MTLURL;
  this.data.name = SETUP.SAMPLES.OBJMTLNAME;
  this.loadOBJMTL();
};
goog.exportProperty(ThreeViewer.FileLoaderController.prototype, "loadSampleOBJMTL", ThreeViewer.FileLoaderController.prototype.loadSampleOBJMTL);
ThreeViewer.FileLoaderController.prototype.loadglTF = function() {
  if (this.data.url && this.data.gltfname) {
    var a = {url:this.data.url, name:this.data.gltfname, type:"glTF"};
    this.ViewerService.loadGLTF(a);
    this.StorageService.saveFile(a);
    this.clearOut();
    this.MessageBus.trigger("hideLoader");
  } else {
    alert("URL to a glTF file and a unique name required");
  }
};
goog.exportProperty(ThreeViewer.FileLoaderController.prototype, "loadglTF", ThreeViewer.FileLoaderController.prototype.loadglTF);
ThreeViewer.FileLoaderController.prototype.loadSampleglTF = function() {
  this.data.url = SETUP.SAMPLES.GLTFURL;
  this.data.gltfname = SETUP.SAMPLES.GLTFNAME;
  this.loadglTF();
};
goog.exportProperty(ThreeViewer.FileLoaderController.prototype, "loadSampleglTF", ThreeViewer.FileLoaderController.prototype.loadSampleglTF);
ThreeViewer.FileLoaderController.prototype.loadJSON = function() {
  if (this.data.jsurl && this.data.jsname) {
    var a = {url:this.data.jsurl, name:this.data.jsname, type:"JSON"};
    this.ViewerService.loadJSON(a);
    this.StorageService.saveFile(a);
    this.clearOut();
    this.MessageBus.trigger("hideLoader");
  } else {
    alert("URL to a JSON file and a unique name required");
  }
};
goog.exportProperty(ThreeViewer.FileLoaderController.prototype, "loadJSON", ThreeViewer.FileLoaderController.prototype.loadJSON);
ThreeViewer.FileLoaderController.prototype.loadSampleJSON = function() {
  this.data.jsurl = SETUP.SAMPLES.JSONURL;
  this.data.jsname = SETUP.SAMPLES.JSONNAME;
  this.loadJSON();
};
goog.exportProperty(ThreeViewer.FileLoaderController.prototype, "loadSampleJSON", ThreeViewer.FileLoaderController.prototype.loadSampleJSON);
ThreeViewer.FileLoaderController.prototype.clearRecent = function() {
  this.StorageService.clear();
};
goog.exportProperty(ThreeViewer.FileLoaderController.prototype, "clearRecent", ThreeViewer.FileLoaderController.prototype.clearRecent);
ThreeViewer.FileLoaderController.prototype.clearOut = function() {
  this.data.obj = null;
  this.data.mtl = null;
  this.data.name = null;
  this.data.url = null;
  this.data.gltfname = null;
  this.data.scale = 1;
  this.data.yOffset = 0;
  this.data.zOffset = 0;
  this.data.jsurl = null;
  this.data.jsname = null;
  this.data.selectedModel = this.data.recent[0];
};
ThreeViewer.FileLoaderController.prototype.populateHistory = function() {
  this.data.recent = this.StorageService.getAllFiles();
};
ThreeViewer.FileLoaderController.prototype.loadSample = function() {
  var a = {obj:SETUP.SAMPLES.OBJURL, mtl:SETUP.SAMPLES.MTLURL, name:SETUP.SAMPLES.OBJMTLNAME, type:"objmtl"};
  this.ViewerService.loadOBJMTL(a);
  this.StorageService.saveFile(a);
};
ThreeViewer.Filters = {};
ThreeViewer.ForceInt = function() {
  this.force = this.force.bind(this);
};
ThreeViewer.ForceInt.factory = function() {
  return(new ThreeViewer.ForceInt).force;
};
ThreeViewer.ForceInt.prototype.force = function(a) {
  return parseInt(a, 10);
};
ThreeViewer.ForceFloat = function() {
  this.force = this.force.bind(this);
};
ThreeViewer.ForceFloat.factory = function() {
  return(new ThreeViewer.ForceFloat).force;
};
ThreeViewer.ForceFloat.prototype.force = function(a) {
  return parseFloat(a);
};
ThreeViewer.MessageBus = function(a) {
  this.message = {};
  this.rootScope = a;
};
goog.exportSymbol("ThreeViewer.MessageBus", ThreeViewer.MessageBus);
ThreeViewer.MessageBus.$inject = ["$rootScope"];
ThreeViewer.MessageBus.prototype.trigger = function(a, b) {
  this.message[a] = b;
  this.broadcast(a);
};
goog.exportProperty(ThreeViewer.MessageBus.prototype, "trigger", ThreeViewer.MessageBus.prototype.trigger);
ThreeViewer.MessageBus.prototype.broadcast = function(a) {
  this.rootScope.$broadcast(a);
};
ThreeViewer.StorageService = function(a, b) {
  this.localStorageService = a;
  this.MessageBus = b;
};
goog.exportSymbol("ThreeViewer.StorageService", ThreeViewer.StorageService);
ThreeViewer.StorageService.$inject = ["localStorageService", "MessageBus"];
ThreeViewer.StorageService.prototype.getFileInfo = function(a) {
  return this.localStorageService.get(a);
};
goog.exportProperty(ThreeViewer.StorageService.prototype, "getFileInfo", ThreeViewer.StorageService.prototype.getFileInfo);
ThreeViewer.StorageService.prototype.clear = function() {
  this.localStorageService.clearAll();
  this.MessageBus.trigger("updatedHistory");
};
ThreeViewer.StorageService.prototype.getNames = function() {
  var a = this.localStorageService.get("models");
  return "[object Array]" === Object.prototype.toString.call(a) ? a : [];
};
goog.exportProperty(ThreeViewer.StorageService.prototype, "getNames", ThreeViewer.StorageService.prototype.getNames);
ThreeViewer.StorageService.prototype.getAllFiles = function() {
  for (var a = this.getNames(), b = [{file:"No recent files", type:!1}], c = 0;c < a.length;c++) {
    b.push(this.getFileInfo(a[c]));
  }
  !1 === b[0].type && 1 < b.length && b.shift();
  return b;
};
goog.exportProperty(ThreeViewer.StorageService.prototype, "getAllFiles", ThreeViewer.StorageService.prototype.getAllFiles);
ThreeViewer.StorageService.prototype.saveFile = function(a) {
  var b = this.getNames();
  -1 == b.indexOf(a.name) && (b.push(a.name), this.localStorageService.set("models", b), this.localStorageService.set(a.name, a));
  this.MessageBus.trigger("updatedHistory");
  this.MessageBus.trigger("showLoader");
};
ThreeViewer.ViewerService = function(a, b) {
  this.timeout = a;
  this.MessageBus = b;
  this.home = null;
};
goog.exportSymbol("ThreeViewer.ViewerService", ThreeViewer.ViewerService);
ThreeViewer.ViewerService.$inject = ["$timeout", "MessageBus"];
ThreeViewer.ViewerService.prototype.init = function(a) {
  this.home = new Viewer.Scene(a);
  this.timeout(function() {
    this.MessageBus.trigger("appReady");
  }.bind(this), SETUP.LOAD_DELAY);
  this.animate();
};
ThreeViewer.ViewerService.prototype.animate = function() {
  requestAnimationFrame(this.animate.bind(this));
  this.render();
};
goog.exportProperty(ThreeViewer.ViewerService.prototype, "animate", ThreeViewer.ViewerService.prototype.animate);
ThreeViewer.ViewerService.prototype.render = function() {
  this.home.renderer.render(this.home.scene, this.home.cameras.liveCam);
};
goog.exportProperty(ThreeViewer.ViewerService.prototype, "render", ThreeViewer.ViewerService.prototype.render);
ThreeViewer.ViewerService.prototype.makeSelection = function(a) {
  a = (new THREE.Vector3(a.x, a.y, 1)).unproject(this.home.cameras.liveCam);
  this.home.raycaster.set(this.home.cameras.liveCam.position, a.sub(this.home.cameras.liveCam.position).normalize());
  a = this.home.raycaster.intersectObjects(this.home.wrangler.collision, !0);
  0 < a.length ? (a = a[0], this.MessageBus.trigger("objectSelected", a[0])) : (a = null, console.info("No intersection detected"));
  return a;
};
ThreeViewer.ViewerService.prototype.loadOBJMTL = function(a) {
  this.home.wrangler.loadOBJMTL(a.obj, a.mtl, a.name);
};
ThreeViewer.ViewerService.prototype.loadOBJ = function(a) {
  this.home.wrangler.loadOBJ(a.obj, a.name);
};
ThreeViewer.ViewerService.prototype.loadGLTF = function(a) {
  this.home.wrangler.loadGLTF(a.url, a.name);
};
ThreeViewer.ViewerService.prototype.loadJSON = function(a) {
  this.home.wrangler.loadJSON(a.url, a.name);
};
ThreeViewer.ViewerService.prototype.rotate = function(a, b, c) {
  this.home.wrangler.currentModel.rotation.set(THREE.Math.degToRad(a), THREE.Math.degToRad(b), THREE.Math.degToRad(c));
};
ThreeViewer.ViewerService.prototype.translate = function(a, b, c) {
  this.home.wrangler.currentModel.position.set(a, b, c);
};
ThreeViewer.ViewerService.prototype.scale = function(a) {
  this.home.wrangler.currentModel.scale.set(a, a, a);
};
var Viewer = {Cameras:function(a) {
  this.context = a.context;
  this.liveCam = null;
  this.FOV = SETUP.CAM.FOV || 70;
  this.WIDTH = this.context.container.clientWidth;
  this.HEIGHT = this.context.container.clientHeight;
  this.VIEWSIZE = SETUP.CAM.VIEWSIZE || 1E3;
  this.ASPECT_RATIO = this.WIDTH / this.HEIGHT;
  this.ORTHO_CAMERA = SETUP.CAM.ORTHO ? !0 : !1;
  this.perpCam = null;
  this.PERP_NEAR_PLANE = SETUP.CAM.PERP_NEAR_PLANE || 1;
  this.PERP_FAR_PLANE = SETUP.CAM.PERP_FAR_PLANE || 1E4;
  this.orthCam = null;
  this.ORTH_NEAR_PLANE = SETUP.CAM.ORTH_NEAR_PLANE || -1E3;
  this.ORTH_FAR_PLANE = SETUP.CAM.ORTH_FAR_PLANE || 1E3;
  this.controls = null;
  this.init();
}};
Viewer.Cameras.prototype = {init:function() {
  this.ORTHO_CAMERA ? this.initOrthographicCamera() : this.initPerspective();
}, initOrthographicCamera:function() {
  this.orthoCam = new THREE.OrthographicCamera(-this.ASPECT_RATIO * this.VIEWSIZE / 2, this.ASPECT_RATIO * this.VIEWSIZE / 2, this.VIEWSIZE / 2, this.VIEWSIZE / -2, this.ORTH_NEAR_PLANE, this.ORTH_FAR_PLANE);
  this.orthoCam.name = "ortho";
  this.liveCam = this.orthoCam;
}, initPerspective:function() {
  this.perpCam = new THREE.PerspectiveCamera(this.FOV, this.ASPECT_RATIO, this.PERP_NEAR_PLANE, this.PERP_FAR_PLANE);
  this.perpCam.position.y = 100;
  this.perpCam.position.z = 400;
  this.perpCam.lookAt(this.context.scene.position);
  this.perpCam.name = "perp";
  this.liveCam = this.perpCam;
}};
Viewer.Setup = function(a) {
  this.context = a.context;
  this.axisHelper = null;
  this.WIDTH = this.context.container.clientWidth;
  this.HEIGHT = this.context.container.clientHeight;
  this.init();
};
Viewer.Setup.prototype = {init:function() {
  this.setupRenderer();
  this.lights();
  this.createGeometry();
  SETUP.SCENE.HELPERS && this.helpers();
}, helpers:function() {
  this.axisHelper = new THREE.AxisHelper(SETUP.SCENE.AXIS_LENGTH);
  this.axisHelper.position.setZ(5);
  this.axisHelper.name = "axishelper";
  this.context.scene.add(this.axisHelper);
}, setupRenderer:function() {
  this.context.renderer.setSize(this.WIDTH, this.HEIGHT);
  this.context.renderer.setViewport(0, 0, this.WIDTH, this.HEIGHT);
  this.context.jqContainer.fadeIn();
}, lights:function() {
  var a = new THREE.DirectionalLight(14540253);
  a.position.set(0, -1, 1).normalize();
  a.name = "light";
  this.context.scene.add(a);
  a = new THREE.SpotLight(16777215, 1);
  a.position.set(-300, 600, 300);
  a.target.position.set(0, 0, 0);
  a.name = "light";
  this.context.scene.add(a);
  a = new THREE.AmbientLight(4473924);
  a.name = "ambient";
  this.context.scene.add(a);
  var b = new THREE.DirectionalLight(16772829);
  b.position.set(0, 0, 1).normalize();
  a.name = "dl2";
  this.context.scene.add(b);
}, createGeometry:function() {
  SETUP.SCENE.GROUND && this.createGround();
  SETUP.SCENE.GRID && this.createGrid();
}, createGrid:function() {
  for (var a = new THREE.Geometry, b = new THREE.LineBasicMaterial({color:"black"}), c = -100;100 >= c;c += 10) {
    a.vertices.push(new THREE.Vector3(-100, .04, c)), a.vertices.push(new THREE.Vector3(100, .04, c)), a.vertices.push(new THREE.Vector3(c, .04, -100)), a.vertices.push(new THREE.Vector3(c, .04, 100));
  }
  a = new THREE.Line(a, b, THREE.LinePieces);
  a.name = "grid";
  this.context.scene.add(a);
}, createGround:function() {
  var a;
  a = new THREE.MeshPhongMaterial({color:16777215, ambient:8947848, shading:THREE.SmoothShading});
  a = new THREE.Mesh(new THREE.PlaneGeometry(1024, 1024), a);
  a.rotation.x = -Math.PI / 2;
  a.name = "ground";
  this.context.scene.add(a);
}};
Viewer.Util = {randomHex:function() {
  return("000000" + Math.floor(16777215 * Math.random()).toString(16)).slice(-6);
}, changeColor:function(a) {
  var b = parseInt("0x" + this.randomHex(), 16);
  a.object.material.color.setHex(b);
}, randomColor:function() {
  return parseInt("0x" + this.randomHex(), 16);
}, randomInt:function(a, b) {
  return Math.floor(Math.random() * (a - b + 1)) + b;
}, supportsWebGL:function() {
  try {
    return!!window.WebGLRenderingContext && !!document.createElement("canvas").getContext("experimental-webgl");
  } catch (a) {
    return!1;
  }
}};
Viewer.Wrangler = function(a) {
  this.context = a.context;
  this.currentModel = null;
  this.loadingManager = new THREE.LoadingManager;
  this.objMtlLoader = new THREE.OBJMTLLoader(this.loadingManager);
  this.objLoader = new THREE.OBJLoader(this.loadingManager);
  this.imgLoader = new THREE.ImageLoader(this.loadingManager);
  this.glTFLoader = new THREE.glTFLoader;
  this.jsLoader = new THREE.JSONLoader;
  this.name = null;
  this.imgFiles = {};
};
Viewer.Wrangler.prototype = {init:function() {
  THREE.Loader.Handlers.add(/\.dds$/i, new THREE.DDSLoader);
  this.listeners();
  this.loadDefaultFiles();
}, listeners:function() {
  this.loadingManager.onProgress = function(a, b, c) {
    console.log(a, b, c);
  };
}, loadDefaultFiles:function() {
  this.loadNormalTexture(SETUP.SAMPLES.GRIDTEXTURE);
}, loadJSON:function(a, b) {
  this.removeFromScene();
  this.name = b;
  this.jsLoader.load(a, function(a, d) {
    var e = new THREE.Mesh(a, new THREE.MeshFaceMaterial(d));
    e.rotation.x = -Math.PI / 2;
    e.position.y += 50;
    e.name = b;
    this.currentModel = e;
    this.context.scene.add(e);
  }.bind(this));
}, loadOBJ:function(a, b) {
  this.removeFromScene();
  this.name = b;
  this.objLoader.load(a, function(a) {
    var d;
    d = this.imgFiles[b] ? this.imgFiles[b] : this.imgFiles.grid;
    a.traverse(function(a) {
      a instanceof THREE.Mesh && (a.material.map = d);
    });
    a.name = b;
    this.currentModel = a;
    this.context.scene.add(a);
  }.bind(this));
}, loadOBJMTL:function(a, b, c) {
  this.removeFromScene();
  this.name = c;
  this.objMtlLoader.load(a, b, function(a) {
    a.name = c;
    this.currentModel = a;
    this.context.scene.add(a);
  }.bind(this));
}, loadGLTF:function(a, b) {
  this.removeFromScene();
  this.name = b;
  this.glTFLoader.load(a, function(a) {
    a.scene.name = b;
    this.currentModel = a.scene;
    this.context.scene.add(a.scene);
  }.bind(this));
}, loadNormalTexture:function(a) {
  var b = new THREE.Texture;
  this.imgLoader.load(a, function(a) {
    b.image = a;
    b.needsUpdate = !0;
    this.imgFiles.grid = b;
  }.bind(this));
}, removeFromScene:function() {
  var a = this.context.scene.getObjectByName(this.name, !0);
  this.context.scene.remove(a);
}};
Viewer.Scene = function(a) {
  this.parentContainer = $("#" + a.containerId);
  this.container = document.getElementById(a.canvasId);
  this.jqContainer = $("#" + a.canvasId);
  this.context = a.context;
  this.WIDTH = this.container.width;
  this.HEIGHT = this.container.height;
  this.raycaster = this.controls = this.cameras = this.setup = this.renderer = this.projector = this.scene = this.wrangler = null;
  this.init();
};
Viewer.Scene.prototype = {init:function() {
  var a = {context:this};
  this.scene = new THREE.Scene;
  this.projector = new THREE.Projector;
  this.renderer = new THREE.WebGLRenderer({canvas:this.container, antialias:!0});
  this.wrangler = new Viewer.Wrangler(a);
  this.setup = new Viewer.Setup(a);
  this.cameras = new Viewer.Cameras(a);
  this.controls = new THREE.OrbitControls(this.cameras.liveCam, this.container);
  this.raycaster = new THREE.Raycaster;
  this.wrangler.init();
  this.listeners();
}, listeners:function() {
  var a = null;
  window.addEventListener("resize", function() {
    a && clearTimeout(a);
    a = setTimeout(function() {
      this.onWindowResize();
    }.bind(this), 100);
  }.bind(this), !1);
  $(document).on("mediaready", function(a) {
    this.scene.add(a.mesh);
  }.bind(this));
}, onWindowResize:function() {
  this.WIDTH = window.innerWidth;
  this.HEIGHT = window.innerHeight;
  this.cameras.liveCam.aspect = this.WIDTH / this.HEIGHT;
  this.cameras.liveCam.updateProjectionMatrix();
  this.renderer.setSize(this.WIDTH, this.HEIGHT);
  this.renderer.setViewport(0, 0, this.WIDTH, this.HEIGHT);
}};
angular.module("ThreeViewerApp", ["ngHammer", "ngRoute", "LocalStorageModule"]).config(ThreeViewer.ConfigLocation).config(ThreeViewer.ConfigLocalStorage).config(ThreeViewer.ConfigRouters).directive("select", ["ViewerService", ThreeViewer.SelectDirective.factory]).directive("stopEvent", ThreeViewer.StopEventDirective.factory).directive("fileLoader", ThreeViewer.FileLoaderDirective).directive("toolbars", ThreeViewer.ToolbarsDirective).directive("about", ThreeViewer.AboutDirective).filter("forceInt", 
ThreeViewer.ForceInt.factory).filter("forceFloat", ThreeViewer.ForceFloat.factory).service("StorageService", ["localStorageService", "MessageBus", ThreeViewer.StorageService]).service("MessageBus", ["$rootScope", ThreeViewer.MessageBus]).service("ViewerService", ["$timeout", "MessageBus", ThreeViewer.ViewerService]).service("FileLoaderController", ["$scope", "MessageBus", "ViewerService", "StorageService"]).controller("AppController", ["$scope", "ViewerService", ThreeViewer.AppController]).controller("FileLoaderController", 
["$scope", "MessageBus", "ViewerService", "StorageService", ThreeViewer.FileLoaderController]);

